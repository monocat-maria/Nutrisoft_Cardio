/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package nutrisoft.view;

import java.awt.event.KeyEvent;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.io.PrintWriter;
import java.util.ArrayList;
import java.util.List;

import javax.swing.JOptionPane;

/**
 *
 * @author monocat-maria <github.com/monocat-maria>
 */
public class Home extends javax.swing.JFrame {

    /**
     * Creates new form Home
     */
    public Home() {
        initComponents();
        this.setLocationRelativeTo(null);
        this.setDefaultCloseOperation(EXIT_ON_CLOSE);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        frame_pacienteOutput = new javax.swing.JFrame();
        jLayeredPane2 = new javax.swing.JLayeredPane();
        jScrollPane1 = new javax.swing.JScrollPane();
        textArea_pacieneOutput = new javax.swing.JTextArea();
        jLayeredPane1 = new javax.swing.JLayeredPane();
        label_data = new javax.swing.JLabel();
        label_hora = new javax.swing.JLabel();
        label_pressaoDiastolica = new javax.swing.JLabel();
        label_pressaoSistolica = new javax.swing.JLabel();
        input_pressaoDiastolica = new javax.swing.JTextField();
        input_pressaoSistolica = new javax.swing.JTextField();
        input_hora = new javax.swing.JTextField();
        input_data = new javax.swing.JTextField();
        btn_salvar = new javax.swing.JButton();
        checkbox_estresse = new javax.swing.JCheckBox();

        frame_pacienteOutput.setMinimumSize(new java.awt.Dimension(500, 450));
        frame_pacienteOutput.setPreferredSize(new java.awt.Dimension(500, 450));

        jLayeredPane2.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Dados da Pressão do Paciente", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Segoe UI", 0, 18), new java.awt.Color(0, 0, 0))); // NOI18N

        textArea_pacieneOutput.setColumns(20);
        textArea_pacieneOutput.setRows(5);
        jScrollPane1.setViewportView(textArea_pacieneOutput);

        jLayeredPane2.setLayer(jScrollPane1, javax.swing.JLayeredPane.DEFAULT_LAYER);

        javax.swing.GroupLayout jLayeredPane2Layout = new javax.swing.GroupLayout(jLayeredPane2);
        jLayeredPane2.setLayout(jLayeredPane2Layout);
        jLayeredPane2Layout.setHorizontalGroup(
            jLayeredPane2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jLayeredPane2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 431, Short.MAX_VALUE)
                .addContainerGap())
        );
        jLayeredPane2Layout.setVerticalGroup(
            jLayeredPane2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jLayeredPane2Layout.createSequentialGroup()
                .addContainerGap(70, Short.MAX_VALUE)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 257, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        javax.swing.GroupLayout frame_pacienteOutputLayout = new javax.swing.GroupLayout(frame_pacienteOutput.getContentPane());
        frame_pacienteOutput.getContentPane().setLayout(frame_pacienteOutputLayout);
        frame_pacienteOutputLayout.setHorizontalGroup(
            frame_pacienteOutputLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(frame_pacienteOutputLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLayeredPane2)
                .addContainerGap())
        );
        frame_pacienteOutputLayout.setVerticalGroup(
            frame_pacienteOutputLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(frame_pacienteOutputLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLayeredPane2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("NutriSoft Cardio");
        setMinimumSize(new java.awt.Dimension(500, 450));
        setPreferredSize(new java.awt.Dimension(500, 450));

        jLayeredPane1.setBackground(new java.awt.Color(102, 102, 102));
        jLayeredPane1.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Pressão do Paciente\n", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Segoe UI", 0, 20), new java.awt.Color(0, 0, 0))); // NOI18N
        jLayeredPane1.setToolTipText("Informe as informações sobre sua pressão abaixo");

        label_data.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        label_data.setLabelFor(input_data);
        label_data.setText("Data:");

        label_hora.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        label_hora.setLabelFor(input_hora);
        label_hora.setText("Hora:");

        label_pressaoDiastolica.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        label_pressaoDiastolica.setLabelFor(input_pressaoDiastolica);
        label_pressaoDiastolica.setText("Pressão Diastólica:");

        label_pressaoSistolica.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        label_pressaoSistolica.setLabelFor(input_pressaoSistolica);
        label_pressaoSistolica.setText("Pressão Sistólica:");

        input_pressaoDiastolica.setToolTipText("medida da diástole do lado inferior do aparelho");
        input_pressaoDiastolica.setNextFocusableComponent(checkbox_estresse);
        input_pressaoDiastolica.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                input_pressaoDiastolicaActionPerformed(evt);
            }
        });

        input_pressaoSistolica.setToolTipText("medida da sístole do lado superior do aparelho");
        input_pressaoSistolica.setNextFocusableComponent(input_pressaoDiastolica);
        input_pressaoSistolica.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                input_pressaoSistolicaActionPerformed(evt);
            }
        });

        input_hora.setToolTipText("hh:mm");
        input_hora.setNextFocusableComponent(input_pressaoSistolica);
        input_hora.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                input_horaActionPerformed(evt);
            }
        });

        input_data.setToolTipText("dd/mm/aaaa");
        input_data.setNextFocusableComponent(input_hora);
        input_data.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                input_dataActionPerformed(evt);
            }
        });

        btn_salvar.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        btn_salvar.setText("Salvar");
        btn_salvar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_salvarActionPerformed(evt);
            }
        });
        btn_salvar.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                btn_salvarKeyPressed(evt);
            }
        });

        checkbox_estresse.setFont(new java.awt.Font("Segoe UI", 0, 16)); // NOI18N
        checkbox_estresse.setText("Estou me sentindo estressado(a)");
        checkbox_estresse.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                checkbox_estresseActionPerformed(evt);
            }
        });
        checkbox_estresse.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                checkbox_estresseKeyPressed(evt);
            }
        });

        jLayeredPane1.setLayer(label_data, javax.swing.JLayeredPane.DEFAULT_LAYER);
        jLayeredPane1.setLayer(label_hora, javax.swing.JLayeredPane.DEFAULT_LAYER);
        jLayeredPane1.setLayer(label_pressaoDiastolica, javax.swing.JLayeredPane.DEFAULT_LAYER);
        jLayeredPane1.setLayer(label_pressaoSistolica, javax.swing.JLayeredPane.DEFAULT_LAYER);
        jLayeredPane1.setLayer(input_pressaoDiastolica, javax.swing.JLayeredPane.DEFAULT_LAYER);
        jLayeredPane1.setLayer(input_pressaoSistolica, javax.swing.JLayeredPane.DEFAULT_LAYER);
        jLayeredPane1.setLayer(input_hora, javax.swing.JLayeredPane.DEFAULT_LAYER);
        jLayeredPane1.setLayer(input_data, javax.swing.JLayeredPane.DEFAULT_LAYER);
        jLayeredPane1.setLayer(btn_salvar, javax.swing.JLayeredPane.DEFAULT_LAYER);
        jLayeredPane1.setLayer(checkbox_estresse, javax.swing.JLayeredPane.DEFAULT_LAYER);

        javax.swing.GroupLayout jLayeredPane1Layout = new javax.swing.GroupLayout(jLayeredPane1);
        jLayeredPane1.setLayout(jLayeredPane1Layout);
        jLayeredPane1Layout.setHorizontalGroup(
            jLayeredPane1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jLayeredPane1Layout.createSequentialGroup()
                .addGap(22, 22, 22)
                .addGroup(jLayeredPane1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(btn_salvar, javax.swing.GroupLayout.PREFERRED_SIZE, 103, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jLayeredPane1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(checkbox_estresse)
                        .addComponent(label_pressaoSistolica)
                        .addComponent(input_pressaoSistolica, javax.swing.GroupLayout.PREFERRED_SIZE, 186, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(label_pressaoDiastolica)
                        .addComponent(input_pressaoDiastolica, javax.swing.GroupLayout.PREFERRED_SIZE, 186, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGroup(jLayeredPane1Layout.createSequentialGroup()
                            .addComponent(label_data)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(input_data, javax.swing.GroupLayout.PREFERRED_SIZE, 140, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGap(18, 18, 18)
                            .addComponent(label_hora)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(input_hora, javax.swing.GroupLayout.PREFERRED_SIZE, 140, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap(62, Short.MAX_VALUE))
        );
        jLayeredPane1Layout.setVerticalGroup(
            jLayeredPane1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jLayeredPane1Layout.createSequentialGroup()
                .addGap(16, 16, 16)
                .addGroup(jLayeredPane1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(label_data)
                    .addComponent(input_data, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(label_hora)
                    .addComponent(input_hora, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(36, 36, 36)
                .addComponent(label_pressaoSistolica)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(input_pressaoSistolica, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(label_pressaoDiastolica)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(input_pressaoDiastolica, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(checkbox_estresse)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btn_salvar, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(68, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLayeredPane1)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(14, 14, 14)
                .addComponent(jLayeredPane1)
                .addGap(23, 23, 23))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void checkbox_estresseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_checkbox_estresseActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_checkbox_estresseActionPerformed

    private void btn_salvarKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_btn_salvarKeyPressed

        if (emptyFields() == true) {
        } else if (emptyFields() == false && validateFields() == false) {

            if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
                frame_pacienteOutput.setVisible(true);
                frame_pacienteOutput.setLocationRelativeTo(null);
                frame_pacienteOutput.setDefaultCloseOperation(DISPOSE_ON_CLOSE);
            }
            write_Paciente();
            setFrame_PacienteOutput();
            read_Paciente();
        }
    }//GEN-LAST:event_btn_salvarKeyPressed

    private void btn_salvarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_salvarActionPerformed
        if (emptyFields() == true) {
        } else if (emptyFields() == false && validateFields() == false) {
            write_Paciente();
            setFrame_PacienteOutput();
            read_Paciente();
        }
    }//GEN-LAST:event_btn_salvarActionPerformed

    private void input_dataActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_input_dataActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_input_dataActionPerformed

    private void input_horaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_input_horaActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_input_horaActionPerformed

    private void input_pressaoSistolicaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_input_pressaoSistolicaActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_input_pressaoSistolicaActionPerformed

    private void input_pressaoDiastolicaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_input_pressaoDiastolicaActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_input_pressaoDiastolicaActionPerformed

    private void checkbox_estresseKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_checkbox_estresseKeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_ENTER && !checkbox_estresse.isSelected()) {
            checkbox_estresse.setSelected(true);
        } else if (evt.getKeyCode() == KeyEvent.VK_ENTER && checkbox_estresse.isSelected()) {
            checkbox_estresse.setSelected(false);
        }
    }//GEN-LAST:event_checkbox_estresseKeyPressed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Home.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Home.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Home.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Home.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Home().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btn_salvar;
    private javax.swing.JCheckBox checkbox_estresse;
    private javax.swing.JFrame frame_pacienteOutput;
    private javax.swing.JTextField input_data;
    private javax.swing.JTextField input_hora;
    private javax.swing.JTextField input_pressaoDiastolica;
    private javax.swing.JTextField input_pressaoSistolica;
    private javax.swing.JLayeredPane jLayeredPane1;
    private javax.swing.JLayeredPane jLayeredPane2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel label_data;
    private javax.swing.JLabel label_hora;
    private javax.swing.JLabel label_pressaoDiastolica;
    private javax.swing.JLabel label_pressaoSistolica;
    private javax.swing.JTextArea textArea_pacieneOutput;
    // End of variables declaration//GEN-END:variables

    private void setFrame_PacienteOutput() {
        frame_pacienteOutput.setVisible(true);
        frame_pacienteOutput.setLocationRelativeTo(null);
        frame_pacienteOutput.setDefaultCloseOperation(DISPOSE_ON_CLOSE);
    }

    private String getCheckbox() {
        String estresse;

        if (checkbox_estresse.isSelected()) {
            estresse = "Positivo";
        } else {
            estresse = "Negativo";
        }

        return estresse;
    }

    private void createDir() {

        try {

            File dir = new File("C:\\NutriSoft_Cardio");

            if (!dir.exists()) {
                dir.mkdir();
            }

            File file = new File(dir + "paciente_pressao.txt");

            if (!file.exists()) {
                file.createNewFile();
            }

        } catch (IOException e) {
        }
    }

    private void write_Paciente() {

        createDir();

        String data = "-------------------------------\nData:" + input_data.getText() + "\nHora:" + input_hora.getText() + "\nPressão Sistólica:" + input_pressaoSistolica.getText() + "\nPressão Diastólica:" + input_pressaoDiastolica.getText() + "\nSob Estresse:" + getCheckbox() + "\n";

        try {
            FileWriter Writer = new FileWriter("C:\\NutriSoft_Cardio\\paciente_pressao.txt", true);
            Writer.write(data);
            Writer.close();
            JOptionPane.showMessageDialog(rootPane, "Informações gravadas com sucesso.");
        } catch (IOException e) {
            JOptionPane.showMessageDialog(rootPane, "Erro ao gravar arquivo.\nERRO:" + e.getMessage());
        }
    }

    private void read_Paciente() {

        try {
            InputStream input = new FileInputStream("C:\\NutriSoft_Cardio\\paciente_pressao.txt");

            byte[] array = input.readAllBytes();

            input.read(array);

            String data = new String(array);
            textArea_pacieneOutput.setText(data + "\n");

            input.close();

        } catch (Exception e) {

        }
    }

    private boolean emptyFields() {

        boolean empty = true;

        try {
            if (input_data.getText().trim().isEmpty()) {

                JOptionPane.showMessageDialog(rootPane, "Insira a data da medição da pressão!\nData não pode ser vazio.");
            } else if (input_hora.getText().trim().isEmpty()) {

                JOptionPane.showMessageDialog(rootPane, "Insira a hora da medição da pressão\nHora não pode ser vazio.");
            } else if (input_pressaoSistolica.getText().trim().isEmpty()) {

                JOptionPane.showMessageDialog(rootPane, "Insira a medida da pressão Sistólica!\nPressão Sistólica não pode ser vazio.");
            } else if (input_pressaoDiastolica.getText().trim().isEmpty()) {

                JOptionPane.showMessageDialog(rootPane, "Insira a medida da pressão Diastólica!\nPressão Diastólica não pode ser vazio.");
            } else {
                empty = false;
            }
        } catch (Exception e) {

        }

        return empty;
    }

    private boolean validateFields() {
        boolean validate = true;

        try {
            if (!input_data.getText().matches("[0-9]{2}[/][0-9]{2}[/][0-9]{4}")) {
                JOptionPane.showMessageDialog(rootPane, "Formato de data inválida!\nDigite a data no formato dd/mm/aaaa.");
            } else if (!input_hora.getText().matches("[0-9]{2}[:][0-9]{2}")) {
                JOptionPane.showMessageDialog(rootPane, "Formato de hora inválida!\nDigite a hora no formato hh:mm.");
            } else if (!input_pressaoSistolica.getText().matches("[0-9]*")) {
                JOptionPane.showMessageDialog(rootPane, "Formato de pressão Sistólica inválida!\nDigite apenas números.");
            } else if (!input_pressaoDiastolica.getText().matches("[0-9]*")) {
                JOptionPane.showMessageDialog(rootPane, "Formato de pressão Diastólica inválida!\nDigite apenas números.");
            } else {
                validate = false;
            }
        } catch (Exception e) {
        }
        return validate;
    }
}
